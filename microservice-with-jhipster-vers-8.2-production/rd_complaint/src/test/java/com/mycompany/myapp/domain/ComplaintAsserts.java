package com.mycompany.myapp.domain;

import static com.mycompany.myapp.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class ComplaintAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertComplaintAllPropertiesEquals(Complaint expected, Complaint actual) {
        assertComplaintAutoGeneratedPropertiesEquals(expected, actual);
        assertComplaintAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertComplaintAllUpdatablePropertiesEquals(Complaint expected, Complaint actual) {
        assertComplaintUpdatableFieldsEquals(expected, actual);
        assertComplaintUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertComplaintAutoGeneratedPropertiesEquals(Complaint expected, Complaint actual) {
        assertThat(expected)
            .as("Verify Complaint auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertComplaintUpdatableFieldsEquals(Complaint expected, Complaint actual) {
        assertThat(expected)
            .as("Verify Complaint relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getCreate_by()).as("check create_by").isEqualTo(actual.getCreate_by()))
            .satisfies(
                e ->
                    assertThat(e.getCreated_at())
                        .as("check created_at")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getCreated_at())
            )
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertComplaintUpdatableRelationshipsEquals(Complaint expected, Complaint actual) {}
}
