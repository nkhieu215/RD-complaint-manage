package com.mycompany.myapp.domain;

import static com.mycompany.myapp.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class ComplaintListAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertComplaintListAllPropertiesEquals(ComplaintList expected, ComplaintList actual) {
        assertComplaintListAutoGeneratedPropertiesEquals(expected, actual);
        assertComplaintListAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertComplaintListAllUpdatablePropertiesEquals(ComplaintList expected, ComplaintList actual) {
        assertComplaintListUpdatableFieldsEquals(expected, actual);
        assertComplaintListUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertComplaintListAutoGeneratedPropertiesEquals(ComplaintList expected, ComplaintList actual) {
        assertThat(expected)
            .as("Verify ComplaintList auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertComplaintListUpdatableFieldsEquals(ComplaintList expected, ComplaintList actual) {
        assertThat(expected)
            .as("Verify ComplaintList relevant properties")
            .satisfies(e -> assertThat(e.getProduct_code()).as("check product_code").isEqualTo(actual.getProduct_code()))
            .satisfies(e -> assertThat(e.getProduct_name()).as("check product_name").isEqualTo(actual.getProduct_name()))
            .satisfies(e -> assertThat(e.getLot_number()).as("check lot_number").isEqualTo(actual.getLot_number()))
            .satisfies(e -> assertThat(e.getBranch()).as("check branch").isEqualTo(actual.getBranch()))
            .satisfies(e -> assertThat(e.getReflector_id()).as("check reflector_id").isEqualTo(actual.getReflector_id()))
            .satisfies(e -> assertThat(e.getTotal_errors()).as("check total_errors").isEqualTo(actual.getTotal_errors()))
            .satisfies(e -> assertThat(e.getQuantity()).as("check quantity").isEqualTo(actual.getQuantity()))
            .satisfies(
                e ->
                    assertThat(e.getProduction_time())
                        .as("check production_time")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getProduction_time())
            )
            .satisfies(e -> assertThat(e.getDapartment_id()).as("check dapartment_id").isEqualTo(actual.getDapartment_id()))
            .satisfies(e -> assertThat(e.getCheck_by_id()).as("check check_by_id").isEqualTo(actual.getCheck_by_id()))
            .satisfies(
                e ->
                    assertThat(e.getRectification_time())
                        .as("check rectification_time")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getRectification_time())
            )
            .satisfies(e -> assertThat(e.getCreate_by()).as("check create_by").isEqualTo(actual.getCreate_by()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getComplaint_detail()).as("check complaint_detail").isEqualTo(actual.getComplaint_detail()))
            .satisfies(e -> assertThat(e.getUnit_of_use()).as("check unit_of_use").isEqualTo(actual.getUnit_of_use()))
            .satisfies(
                e ->
                    assertThat(e.getImplementation_result_id())
                        .as("check implementation_result_id")
                        .isEqualTo(actual.getImplementation_result_id())
            )
            .satisfies(e -> assertThat(e.getComment()).as("check comment").isEqualTo(actual.getComment()))
            .satisfies(e -> assertThat(e.getFollow_up_comment()).as("check follow_up_comment").isEqualTo(actual.getFollow_up_comment()))
            .satisfies(e -> assertThat(e.getComplaint_id()).as("check complaint_id").isEqualTo(actual.getComplaint_id()))
            .satisfies(
                e ->
                    assertThat(e.getCreated_at())
                        .as("check created_at")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getCreated_at())
            )
            .satisfies(
                e ->
                    assertThat(e.getUpdated_at())
                        .as("check updated_at")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getUpdated_at())
            )
            .satisfies(e -> assertThat(e.getSerial()).as("check serial").isEqualTo(actual.getSerial()))
            .satisfies(e -> assertThat(e.getMac_address()).as("check mac_address").isEqualTo(actual.getMac_address()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertComplaintListUpdatableRelationshipsEquals(ComplaintList expected, ComplaintList actual) {}
}
