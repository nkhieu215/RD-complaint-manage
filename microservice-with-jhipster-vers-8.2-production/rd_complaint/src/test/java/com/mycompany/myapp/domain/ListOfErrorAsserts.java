package com.mycompany.myapp.domain;

import static com.mycompany.myapp.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class ListOfErrorAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertListOfErrorAllPropertiesEquals(ListOfError expected, ListOfError actual) {
        assertListOfErrorAutoGeneratedPropertiesEquals(expected, actual);
        assertListOfErrorAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertListOfErrorAllUpdatablePropertiesEquals(ListOfError expected, ListOfError actual) {
        assertListOfErrorUpdatableFieldsEquals(expected, actual);
        assertListOfErrorUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertListOfErrorAutoGeneratedPropertiesEquals(ListOfError expected, ListOfError actual) {
        assertThat(expected)
            .as("Verify ListOfError auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertListOfErrorUpdatableFieldsEquals(ListOfError expected, ListOfError actual) {
        assertThat(expected)
            .as("Verify ListOfError relevant properties")
            .satisfies(e -> assertThat(e.getError_code()).as("check error_code").isEqualTo(actual.getError_code()))
            .satisfies(e -> assertThat(e.getError_name()).as("check error_name").isEqualTo(actual.getError_name()))
            .satisfies(e -> assertThat(e.getQuantity()).as("check quantity").isEqualTo(actual.getQuantity()))
            .satisfies(e -> assertThat(e.getError_source()).as("check error_source").isEqualTo(actual.getError_source()))
            .satisfies(e -> assertThat(e.getReason_id()).as("check reason_id").isEqualTo(actual.getReason_id()))
            .satisfies(e -> assertThat(e.getMethod()).as("check method").isEqualTo(actual.getMethod()))
            .satisfies(e -> assertThat(e.getCheck_by_id()).as("check check_by_id").isEqualTo(actual.getCheck_by_id()))
            .satisfies(e -> assertThat(e.getCreate_by()).as("check create_by").isEqualTo(actual.getCreate_by()))
            .satisfies(e -> assertThat(e.getImage()).as("check image").isEqualTo(actual.getImage()))
            .satisfies(
                e ->
                    assertThat(e.getCreated_at())
                        .as("check created_at")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getCreated_at())
            )
            .satisfies(
                e ->
                    assertThat(e.getUpdated_at())
                        .as("check updated_at")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getUpdated_at())
            )
            .satisfies(
                e ->
                    assertThat(e.getCheck_time())
                        .as("check check_time")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getCheck_time())
            )
            .satisfies(e -> assertThat(e.getComplaint_id()).as("check complaint_id").isEqualTo(actual.getComplaint_id()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertListOfErrorUpdatableRelationshipsEquals(ListOfError expected, ListOfError actual) {}
}
